{"version":3,"file":"index.js","sources":["../../../../../src/plugin/external/typedoc/ts-links-checker/index.js"],"sourcesContent":["import { ProjectReflection, ReflectionKind } from 'typedoc';\r\n\r\n/**\r\n * Provides a plugin to verbosely log any unknown symbols.\r\n *\r\n * @param {import('typedoc').Application} app - Typedoc Application\r\n */\r\nexport function load(app)\r\n{\r\n   const emptyArray = [];\r\n\r\n   /**\r\n    * Stores the symbols that failed to resolve.\r\n    *\r\n    * @type {Set<string>}\r\n    */\r\n   const failed = new Set();\r\n\r\n   /**\r\n    * @param {import('typedoc').Reflection}  reflection -\r\n    *\r\n    * @returns {string} The fully qualified symbol name.\r\n    */\r\n   function getSymbolName(reflection)\r\n   {\r\n      const parts = [];\r\n\r\n      while (reflection)\r\n      {\r\n         // Do not include the project reflection.\r\n         if (reflection instanceof ProjectReflection) { break; }\r\n\r\n         parts.unshift(reflection.name);\r\n         reflection = reflection.parent;\r\n      }\r\n\r\n      return parts.join('.');\r\n   }\r\n\r\n   /**\r\n    * @param {import('typedoc').DeclarationReference} ref - Unknown symbol reference.\r\n    *\r\n    * @param {import('typedoc').Reflection}  refl - Source reflection.\r\n    */\r\n   function handleUnknownSymbol(ref, refl)\r\n   {\r\n      if (ref.moduleSource === 'typescript' || (!ref.moduleSource && ref.resolutionStart === 'global'))\r\n      {\r\n         const symbolPath = ref.symbolReference?.path ?? emptyArray;\r\n\r\n         const name = symbolPath?.map((path) => path.path).join('.');\r\n\r\n         if (!name) { return; }\r\n\r\n         if (!failed.has(name))\r\n         {\r\n            failed.add(name);\r\n\r\n            app.logger.verbose(`[typedoc-ts-links-checker]: Failed to resolve type: ${name} from ${\r\n             getSymbolName(refl)}; kind: ${ReflectionKind.singularString(refl.kind)}`);\r\n         }\r\n      }\r\n   }\r\n\r\n   app.converter.addUnknownSymbolResolver(handleUnknownSymbol);\r\n}\r\n\r\n"],"names":[],"mappings":";;AAEA;AACA;AACA;AACA;AACA;AACO,SAAS,IAAI,CAAC,GAAG;AACxB;AACA,GAAG,MAAM,UAAU,GAAG,EAAE,CAAC;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,MAAM,MAAM,GAAG,IAAI,GAAG,EAAE,CAAC;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,SAAS,aAAa,CAAC,UAAU;AACpC,GAAG;AACH,MAAM,MAAM,KAAK,GAAG,EAAE,CAAC;AACvB;AACA,MAAM,OAAO,UAAU;AACvB,MAAM;AACN;AACA,SAAS,IAAI,UAAU,YAAY,iBAAiB,EAAE,EAAE,MAAM,EAAE;AAChE;AACA,SAAS,KAAK,CAAC,OAAO,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;AACxC,SAAS,UAAU,GAAG,UAAU,CAAC,MAAM,CAAC;AACxC,OAAO;AACP;AACA,MAAM,OAAO,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AAC7B,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,SAAS,mBAAmB,CAAC,GAAG,EAAE,IAAI;AACzC,GAAG;AACH,MAAM,IAAI,GAAG,CAAC,YAAY,KAAK,YAAY,KAAK,CAAC,GAAG,CAAC,YAAY,IAAI,GAAG,CAAC,eAAe,KAAK,QAAQ,CAAC;AACtG,MAAM;AACN,SAAS,MAAM,UAAU,GAAG,GAAG,CAAC,eAAe,EAAE,IAAI,IAAI,UAAU,CAAC;AACpE;AACA,SAAS,MAAM,IAAI,GAAG,UAAU,EAAE,GAAG,CAAC,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AACrE;AACA,SAAS,IAAI,CAAC,IAAI,EAAE,EAAE,OAAO,EAAE;AAC/B;AACA,SAAS,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC;AAC9B,SAAS;AACT,YAAY,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;AAC7B;AACA,YAAY,GAAG,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,oDAAoD,EAAE,IAAI,CAAC,MAAM;AACjG,aAAa,aAAa,CAAC,IAAI,CAAC,CAAC,QAAQ,EAAE,cAAc,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;AACvF,UAAU;AACV,OAAO;AACP,IAAI;AACJ;AACA,GAAG,GAAG,CAAC,SAAS,CAAC,wBAAwB,CAAC,mBAAmB,CAAC,CAAC;AAC/D;;;;"}